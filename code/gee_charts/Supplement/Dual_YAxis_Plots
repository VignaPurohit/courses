/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = /* color: #00ff00 */ee.Geometry.Polygon(
        [[[7.937819856526227, 10.723387714834615],
          [7.938334840657086, 10.721922445898615],
          [7.939160961033673, 10.722444251117416],
          [7.938603061558576, 10.723767207790642]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// Charting Rainfall vs NDVI 

// Select a location
var geometry = ee.Geometry.Polygon([[
  [7.9378, 10.7233],
  [7.9383, 10.7219],
  [7.9391, 10.7224],
  [7.9386, 10.7237]
]]);
Map.centerObject(geometry, 16);

// Select a time period
var year = 2020;
var startDate = ee.Date.fromYMD(year, 1, 1);
var endDate = startDate.advance(1, 'year');

// Get NDVI from Sentinel-2
var s2 = ee.ImageCollection('COPERNICUS/S2_SR');

// Function to remove cloud and snow pixels from Sentinel-2 SR image
function maskCloudAndShadowsSR(image) {
  var cloudProb = image.select('MSK_CLDPRB');
  var snowProb = image.select('MSK_SNWPRB');
  var cloud = cloudProb.lt(5);
  var snow = snowProb.lt(5);
  var scl = image.select('SCL'); 
  var shadow = scl.eq(3); // 3 = cloud shadow
  var cirrus = scl.eq(10); // 10 = cirrus
  // Cloud probability less than 5% or cloud shadow classification
  var mask = cloud.and(cirrus.neq(1)).and(shadow.neq(1));
  return image.updateMask(mask);
}

var s2Filtered = s2
  .filter(ee.Filter.date(startDate, endDate))
  .filter(ee.Filter.bounds(geometry))
  .map(maskCloudAndShadowsSR);
  
function addNDVI(image) {
  var ndvi = image.normalizedDifference(['B8', 'B4']).rename('ndvi');
  return image.addBands(ndvi);
}

var withNdvi = s2Filtered.map(addNDVI);

// Get Rainfall from CHIRPS
var chirps = ee.ImageCollection('UCSB-CHG/CHIRPS/PENTAD');
var chirpsFiltered = chirps
  .filter(ee.Filter.date(startDate, endDate));

// Create a collection of monthly images
// with bands for ndvi and rainfall
var months = ee.List.sequence(1, 12);

var byMonth = months.map(function(month) {
    // Total monthly rainfall
    var monthlyRain = chirpsFiltered
      .filter(ee.Filter.calendarRange(year, year, 'year'))
      .filter(ee.Filter.calendarRange(month, month, 'month'));
    var totalRain = monthlyRain.sum();
    // Average NDVI
    var monthlyNdvi = withNdvi.select('ndvi')
      .filter(ee.Filter.calendarRange(year, year, 'year'))
      .filter(ee.Filter.calendarRange(month, month, 'month'));
    var averageNdvi = monthlyNdvi.mean();
  
    return totalRain.addBands(averageNdvi).set({
      'system:time_start': ee.Date.fromYMD(year, month, 1).millis(),
      'year': year,
      'month': month})
})
var monthlyCol = ee.ImageCollection.fromImages(byMonth);

print('Monthly Collection with NDVI and Precipitation', monthlyCol)

// We now create a time-series chart
// Since both of our bands have different ranges, 
// we will create a chart with dual Y-Axis.
// Learn more at https://developers.google.com/chart/interactive/docs/gallery/columnchart#dual-y-charts
var chart = ui.Chart.image.series({
  imageCollection: monthlyCol,
  region: geometry,
  reducer: ee.Reducer.mean(),
  scale: 10,
}).setChartType('ColumnChart')
  .setOptions({
    title: 'Total Monthly Rainfall vs. Mean Monthly NDVI',
    lineWidth: 0.5,
    pointSize: 2,
    series: {
      0: {targetAxisIndex: 0, color: '#addd8e'},
      1: {targetAxisIndex: 1, color: '#2b8cbe'}, 
    },
    vAxes: {
      0: {title: 'NDVI', gridlines: {count: 5}, viewWindow: {min:0, max:1},
          titleTextStyle: { bold: true, color: '#addd8e' }},
      1: {title: 'Precipitation (mm)', gridlines: {color: 'none'},
          titleTextStyle: { bold: true, color: '#2b8cbe' }},
      },
    hAxis: {
      gridlines:  {color: 'none'}
    },
    chartArea: {left: 100, right: 100}
});

print(chart);
