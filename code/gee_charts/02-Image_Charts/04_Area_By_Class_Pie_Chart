/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = /* color: #98ff00 */ee.Geometry.Point([77.6802412825793, 13.2121807505154]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var worldcover = ee.ImageCollection('ESA/WorldCover/v200').first();

var classified = worldcover.remap(
  [10, 20, 30, 40, 50, 60, 70, 80, 90, 95, 100],
  [0,  1 , 2,  3,  4,  5,  6,  7,  8,  9,  10]).rename('classification');

print(classified)


var worldCoverPalette = ['006400', 'ffbb22', 'ffff4c', 'f096ff', 'fa0000',
  'b4b4b4', 'f0f0f0', '0064c8', '0096a0', '00cf75', 'fae6a0']
var worldCoverClassNames= ['Tree Cover', 'Shrubland', 'Grassland', 'Cropland', 'Built-up',
  'Bare / sparse Vegetation', 'Snow and Ice', 'Permanent Water Bodies',
  'Herbaceous Wetland', 'Mangroves', 'Moss and Lichen'];
var visParams = {min:0, max:10, palette: worldCoverPalette}

Map.centerObject(geometry, 12);
Map.addLayer(classified, visParams, 'WorldCover');

var buffer = geometry.buffer(1000);
Map.addLayer(buffer)

// var classNames = ee.Dictionary.fromLists(
//   ['0','1','2','3','4','5','6','7','8','9', '10'],
//   ['Tree Cover', 'Shrubland', 'Grassland', 'Cropland', 'Built-up',
//   'Bare / sparse Vegetation', 'Snow and Ice', 'Permanent Water Bodies',
//   'Herbaceous Wetland', 'Mangroves', 'Moss and Lichen']
// )
var classColors = ee.Dictionary.fromLists(
  ['0','1','2','3','4','5','6','7','8','9', '10'],
  ['006400', 'ffbb22', 'ffff4c', 'f096ff', 'fa0000',
  'b4b4b4', 'f0f0f0', '0064c8', '0096a0', '00cf75', 'fae6a0'])

var areaImage = ee.Image.pixelArea().divide(1e5).addBands(classified);

// Calculate areas
var areas = areaImage.reduceRegion({
      reducer: ee.Reducer.sum().group({
      groupField: 1,
      groupName: 'classification',
    }),
    geometry: buffer,
    scale: 10,
    maxPixels: 1e10
    }); 
 
var classAreas = ee.List(areas.get('groups'))

// Process results to extract the areas and
// create a FeatureCollection

var classAreasList = classAreas.map(function(item) {
  var areaDict = ee.Dictionary(item)
  var classNumber = ee.Number(areaDict.get('classification')).format();
  var area = ee.Number(
    areaDict.get('sum'))
  return ee.List([classNumber, area])
})

var classAreasDict = ee.Dictionary(classAreasList.flatten());

// Classes that are not present in the region are not present
// This causes problems assigning correct colors while charting
// Initialize a dictionary with all class numbers
var initAreas = ee.Dictionary.fromLists(
  ['0','1','2','3','4','5','6','7','8','9', '10'],
  [ 0 , 0,  0,  0,  0,  0,  0,  0,  0,  0, 0])
var classAreasCombined = initAreas.combine(classAreasDict)
print('Class Areas (Dictionary)', classAreasCombined)

// Convert the dictionary into a FeatureCollection
// so we can create a chart

// We can define a dictionary with class names
var classNames = ee.Dictionary.fromLists(
  ['0','1','2','3','4','5','6','7','8','9', '10'],
  worldCoverClassNames
)

// We take the list of classes and map() a function
var classList = classAreasDict.keys();
var classAreaFc = ee.FeatureCollection(classList.map(function(classNumber) {
  var classArea = classAreasCombined.get(classNumber);
  var className = classNames.get(classNumber);
  var classColor = classColors.get(classNumber);
  return ee.Feature(null, {'class': classNumber, 'class_name': className, 'Area': classArea, 'color': classColor});
}));
print('Class Area (FeatureCollection)', classAreaFc)
// We can now chart the resulting FeatureCollection
// If your area is large, it is advisable to first Export
// the featurecolleciton as an Asset and import it once
// the export is finished.
var colors = classAreaFc.aggregate_array('color');
print(colors);

colors.evaluate(function(colorlist) {
  // Let's create a Pie Chart
  var areaChart = ui.Chart.feature.byFeature({
    features: classAreaFc,
    xProperty: 'class_name',
    yProperties: ['Area']
  }).setChartType('PieChart')
  .setOptions({
    title: 'Area by class',
    colors: colorlist,
    pieSliceBorderColor: '#fafafa',
    pieSliceTextStyle: {'color': '#252525'}, 
    pieSliceText: 'percentage',
    // slices: { 6: {offset: 0.2, color: 'black'}}
});
print(areaChart); 
})

