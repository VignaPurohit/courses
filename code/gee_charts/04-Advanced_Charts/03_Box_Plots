var s2 = ee.ImageCollection('COPERNICUS/S2_HARMONIZED');
var geometry = ee.Geometry.Polygon([[
  [82.60642647743225, 27.16350437805251],
  [82.60984897613525, 27.1618529901377],
  [82.61088967323303, 27.163695288375266],
  [82.60757446289062, 27.16517483230927]
]]);
Map.addLayer(geometry, {color: 'red'}, 'Farm');
Map.centerObject(geometry);
var rgbVis = {min: 0.0, max: 3000, bands: ['B4', 'B3', 'B2']};

var filtered = s2
  .filter(ee.Filter.date('2017-01-01', '2018-01-01'))
  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 30))
  .filter(ee.Filter.bounds(geometry));

// Write a function for Cloud masking
function maskS2clouds(image) {
  var qa = image.select('QA60');
  var cloudBitMask = 1 << 10;
  var cirrusBitMask = 1 << 11;
  var mask = qa.bitwiseAnd(cloudBitMask).eq(0).and(
             qa.bitwiseAnd(cirrusBitMask).eq(0));
  return image.updateMask(mask).multiply(0.0001)
      .select('B.*')
      .copyProperties(image, ['system:time_start']);
}

var filtered = filtered.map(maskS2clouds);
// Write a function that computes NDVI for an image and adds it as a band
function addNDVI(image) {
  var ndvi = image.normalizedDifference(['B8', 'B4']).rename('ndvi');
  return image.addBands(ndvi);
}

// Map the function over the collection
var withNdvi = filtered.map(addNDVI);

// Extract the values from each image
var values = withNdvi.map(function(image) {
  var ndvi = image.select('ndvi');
  
  var allReducers = ee.Reducer.mean()
    .combine({reducer2: ee.Reducer.min(), sharedInputs: true} )
    .combine({reducer2: ee.Reducer.max(), sharedInputs: true} )
    .combine({reducer2: ee.Reducer.percentile([25]), sharedInputs: true} )
    .combine({reducer2: ee.Reducer.percentile([50]), sharedInputs: true} )
    .combine({reducer2: ee.Reducer.percentile([75]), sharedInputs: true} )
  
  var stats = ndvi.reduceRegion({
    reducer: allReducers,
    geometry: geometry,
    scale: 10});
  var date = image.date();
  var dateString = date.format('YYYY-MM-dd');
  //var dateString = date.format('YYYY-MM');

  var properties = {
    'date': dateString,
    'min': stats.get('ndvi_min'),
    'max': stats.get('ndvi_max'),
    'p25': stats.get('ndvi_p25'),
    'p50': stats.get('ndvi_p50'),
    'p75': stats.get('ndvi_p75'),
  }
  return ee.Feature(null, properties)
  
})
// Format the results as a list
// We need a list to map() over
var dateList = values.aggregate_array('date');

var valuesList = dateList.map(function(date) {
  var f = values.filter(ee.Filter.eq('date', date)).first();
  var v = date;
  var median = f.get('p50');
  var min = f.get('min');
  var max = f.get('max');
  var p25 = f.get('p25');
  var p50 = f.get('p50');
  var p75 = f.get('p75');
  return [v, median, min, max, p25, p50, p75]
})
print(valuesList)
var dataTable = {
  cols: [
    {id: 'x', type: 'string'},
    {id: 'median', type: 'number'}, // dummy series
    {id: 'min', type: 'number', role: 'interval'},
    {id: 'max', type: 'number', role: 'interval'},
    {id: 'firstQuartile', type: 'number', role: 'interval'},
    {id: 'median', type: 'number', role: 'interval'},
    {id: 'thirdQuartile', type:'number', role: 'interval'}
  ]
};

valuesList.evaluate(function(values) {
  dataTable.rows = values.map(function(row) {
      return { c: row.map(function(o) { return { 'v': o } }) }
    })
    var options = {
      title:'NDVI Time-Series Box Plot',
      height: 500,
      //legend: {position: 'none'},
      hAxis: {
        gridlines: {color: '#fff'}
      },
      vAxis: {
        title: 'Values', 
        //viewWindow: {min: 3.0, max: 6.0}
      },
      legend: {position: 'none'},
      lineWidth: 1,
      series: [{'color': '#D3362D'}],
      interpolateNulls: true,
      intervals: {
        barWidth: 1,
        boxWidth: 1,
        lineWidth: 2,
        style: 'boxes'
      },
      interval: {
        min: {
          style: 'bars',
          fillOpacity: 1,
          color: '#777'
        },
        max: {
          style: 'bars',
          fillOpacity: 1,
          color: '#777'
        }
      }
    };
    
    print(ui.Chart(dataTable, 'LineChart', options));
  })

