var geometry = ee.Geometry.Polygon([[
    [77.4783, 13.0848],
    [77.4783, 12.8198],
    [77.7502, 12.8198],
    [77.7502, 13.0848]]
]);
          
var s2 = ee.ImageCollection('COPERNICUS/S2_HARMONIZED');


var filtered = s2
  .filter(ee.Filter.date('2019-01-01', '2020-01-01'))
  .filter(ee.Filter.bounds(geometry));

// Load the Cloud Score+ collection
var csPlus = ee.ImageCollection('GOOGLE/CLOUD_SCORE_PLUS/V1/S2_HARMONIZED');
var csPlusBands = csPlus.first().bandNames();

// We need to add Cloud Score + bands to each Sentinel-2
// image in the collection
// This is done using the linkCollection() function
var filteredS2WithCs = filtered.linkCollection(csPlus, csPlusBands);

// Function to mask pixels with low CS+ QA scores.
function maskLowQA(image) {
  var qaBand = 'cs';
  var clearThreshold = 0.5;
  var mask = image.select(qaBand).gte(clearThreshold);
  return image.updateMask(mask);
}

// Add a function that adds a property to each image
// with the cloud cover in the chosen geometry
var calculateCloudCover = function(image) {
  // Apply the cloud mask function
  var maskedImage = ee.Image(maskLowQA(image));
  // The image now has some pixels that are masked
  // We count the number of unmasked pixels
  // Select any band, since all bands have the same mask
  // Working with a single band maes the analysis simpler
  var bandName = 'B1';
  var band = maskedImage.select(bandName);
  var withMaskStats = band.reduceRegion({
    reducer: ee.Reducer.count(),
    geometry: geometry,
    scale: 10
  });
  var cloudFreePixels = withMaskStats.getNumber(bandName);
  
  // Remove the mask and count all pixels
  var withoutMaskStats = band.unmask(0).reduceRegion({
    reducer: ee.Reducer.count(),
    geometry: geometry,
    scale: 10
  });
  
  var totalPixels = withoutMaskStats.getNumber('B1');
  
  var cloudCoverPercentage = ee.Number.expression(
    '100*(totalPixels-cloudFreePixels)/totalPixels', {
      totalPixels: totalPixels,
      cloudFreePixels: cloudFreePixels
    });
  return image.set({
    'CLOUDY_PIXEL_PERCENTAGE_REGION': cloudCoverPercentage
  });
};

var filteredWithCount = filteredS2WithCs.map(calculateCloudCover);

print(filteredWithCount.first());

// Filter using the newly created property
var cloudFreeImages = filteredWithCount
  .filter(ee.Filter.eq('CLOUDY_PIXEL_PERCENTAGE_REGION', 0));
print('Cloud Free Images in Region', cloudFreeImages.size());

// Verify the results
// Sort the results by cloud cover and pick the most cloudy
// image that is cloud-free within the region
var image = cloudFreeImages.sort('CLOUDY_PIXEL_PERCENTAGE', false).first()

var visParams = {min:0, max:3000, bands: ['B4', 'B3', 'B2']};

Map.centerObject(geometry);
Map.addLayer(image, visParams, 'Image');
Map.addLayer(geometry, {color: 'red'}, 'Selected Region');
