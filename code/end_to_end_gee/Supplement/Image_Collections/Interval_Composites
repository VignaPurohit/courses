// Example script showing how to create composite images
// at regular intervals

// Let's create 15-day composites
// Change the parameters below for custom intervals
// i.e. For monthly composites, use interval=1 and unit='month'

// Define the interval
var interval = 15;

// Define the unit of interval
// 'year', 'month' 'week', 'day', 'hour', 'minute', or 'second'.
var unit = 'day';
 
// Define the period
var startDate = ee.Date.fromYMD(2023, 1, 1);
var endDate = ee.Date.fromYMD(2024, 1, 1);

// Get the total units in the period
var totalUnits = endDate.difference(startDate, unit);
print('Total ' + unit, totalUnits);

// Create a list of dates at start of each interval
var intervals = ee.List.sequence(0, totalUnits, interval);

var startDates = intervals.map(function(interval) {
  var intervalStart = startDate.advance(interval, unit);
  return intervalStart;
});

print('Start dates for each interval', startDates);

// Now we create the composites

// Define collection and apply filters
var s2 = ee.ImageCollection("COPERNICUS/S2_SR_HARMONIZED")
var basin = ee.FeatureCollection("WWF/HydroSHEDS/v1/Basins/hybas_7")
var arkavathy = basin.filter(ee.Filter.eq('HYBAS_ID', 4071139640))
var geometry = arkavathy.geometry()
Map.centerObject(geometry, 11)

var filtered = s2
  .filter(ee.Filter.date(startDate, endDate))
  .filter(ee.Filter.bounds(geometry));

// Load the Cloud Score+ collection
var csPlus = ee.ImageCollection('GOOGLE/CLOUD_SCORE_PLUS/V1/S2_HARMONIZED');
var csPlusBands = csPlus.first().bandNames();

// We need to add Cloud Score + bands to each Sentinel-2
// image in the collection
// This is done using the linkCollection() function
var filteredS2WithCs = filtered.linkCollection(csPlus, csPlusBands);

// Function to mask pixels with low CS+ QA scores.
function maskLowQA(image) {
  var qaBand = 'cs';
  var clearThreshold = 0.5;
  var mask = image.select(qaBand).gte(clearThreshold);
  return image.updateMask(mask);
}


var filteredMasked = filteredS2WithCs
  .map(maskLowQA);


// We map() a function that takes each date from the startDates
// and applies a filter for images in that interval
var compositeImages = startDates.map(function(startDate) {
  var intervalStartDate = ee.Date(startDate);
  var intervalEndDate = intervalStartDate.advance(interval, unit);
  // Remember that end dates are not included in EE Filters
  // So we get images upto the end date. 
  var intervalFiltered = filteredMasked.filter(
    ee.Filter.date(intervalStartDate, intervalEndDate));
  // Count the number of images
  // This will be used later to filter out
  // composites with no matching images
  var intervalImageCount = intervalFiltered.size();
  var composite = intervalFiltered.median();
  return composite.set({
    'system:time_start': intervalStartDate.millis(),
    'system:time_end': intervalEndDate.millis(),
    'start_date': intervalStartDate.format('YYYY-MM-dd'),
    'end_date': intervalEndDate.format('YYYY-MM-dd'),
    'image_count': intervalImageCount
  });
});

var compositeCol = ee.ImageCollection.fromImages(compositeImages);

var compositeColFiltered = compositeCol.filter(
  ee.Filter.neq('image_count', 0));

print('Composites at ' + interval + ' ' + unit + ' intervals',
  compositeColFiltered);
