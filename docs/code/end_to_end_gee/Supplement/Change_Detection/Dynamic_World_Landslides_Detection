// Landslides Detection using Dynamic World Probability Bands

// We want to detect landslides occurred in December 2018
// in India's Kodagu district.

var geometry = ee.Geometry.Polygon([[
  [75.70357667713435, 12.49723970868507],
  [75.70357667713435, 12.470171844429931],
  [75.7528434923199, 12.470171844429931],
  [75.7528434923199, 12.49723970868507]
]]);
var dateOfIncident = ee.Date.fromYMD(2018, 12, 15);

Map.centerObject(geometry)

var beforeDateFilter = ee.Filter.and(
  ee.Filter.date(dateOfIncident.advance(-2, 'year'), dateOfIncident),
  ee.Filter.calendarRange(12, 12, 'month'));

// The period after the landslides was comparitively
// cloud-free, so we obtain images from upto 1 month after.
var afterDateFilter = ee.Filter.date(
  dateOfIncident, dateOfIncident.advance(1, 'month'));
  
// Apply the filters and get composites

// Load the Dynamic World collection
var dw = ee.ImageCollection('GOOGLE/DYNAMICWORLD/V1');

var beforeDW = dw
  .filter(beforeDateFilter)
  .filter(ee.Filter.bounds(geometry))
  .mean();
  
var afterDW = dw
  .filter(afterDateFilter)
  .filter(ee.Filter.bounds(geometry))
  .mean();
  
// Load the Sentinel-2 collection 
var s2 = ee.ImageCollection('COPERNICUS/S2_HARMONIZED');

// Write a function for Cloud masking
function maskS2clouds(image) {
  var qa = image.select('QA60');
  var cloudBitMask = 1 << 10;
  var cirrusBitMask = 1 << 11;
  var mask = qa.bitwiseAnd(cloudBitMask).eq(0).and(
             qa.bitwiseAnd(cirrusBitMask).eq(0));
  return image.updateMask(mask)//.divide(10000)
      .select("B.*")
      .copyProperties(image, ["system:time_start"]);
} 

var filtered = s2
  .filter(ee.Filter.bounds(geometry))
  .map(maskS2clouds)
  .select('B.*');

var beforeS2 = filtered
  .filter(beforeDateFilter)
  .median();

var afterS2 = filtered
  .filter(afterDateFilter)
  .median();

var rgbVis = {min: 0.0, max: 3000, bands: ['B4', 'B3', 'B2'],};

//Map.centerObject(geometry, 13);
Map.addLayer(beforeS2.clip(geometry), rgbVis, 'Before');
Map.addLayer(afterS2.clip(geometry), rgbVis, 'After');

var probabilityVis = {
  min:0, 
  max:0.5,
  palette: ['#ffffd4','#fed98e','#fe9929','#d95f0e','#993404'],
  bands: ['bare']
}
Map.addLayer(beforeDW.clip(geometry), probabilityVis, 'Before Probabilities', false);
Map.addLayer(afterDW.clip(geometry), probabilityVis, 'After Probabilities', false);

// We define the landslide pixels where the 'bare' probability
// has increased or 'trees' probability has decreased
var bareThreshold = 0.1;
var treesThreshold = 0.2;
var bareChange = afterDW.select('bare')
  .subtract(beforeDW.select('bare'))
  .gt(bareThreshold);
var treesChange = beforeDW.select('trees')
  .subtract(afterDW.select('trees'))
  .gt(treesThreshold);
var change = bareChange.or(treesChange);
  
var changeVis = {min:0, max:1, palette: ['red']};
Map.addLayer(change.selfMask().clip(geometry), changeVis,
  'Detected Landslides');
