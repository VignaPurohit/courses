// We use the Harmonized Global Night Time Lights (1992-2020) dataset
var dmsp = ee.ImageCollection('projects/sat-io/open-datasets/Harmonized_NTL/dmsp');
var viirs = ee.ImageCollection('projects/sat-io/open-datasets/Harmonized_NTL/viirs');

// Merge both collections to create a single Night Lights Collection
var ntlCol = dmsp.merge(viirs);

// Using LSIB for country boundaries
var lsib = ee.FeatureCollection('USDOS/LSIB_SIMPLE/2017');
    
var country = 'Brazil';
var selected = lsib.filter(ee.Filter.eq('country_na', country));
var geometry = selected.geometry();

var year = 2009;
var startDate = ee.Date.fromYMD(year, 1, 1);
var endDate = startDate.advance(1, 'year')

// We filter for the selected year
var filtered = ntlCol
  .filter(ee.Filter.date(startDate, endDate))

// Extract the image and set the masked pixels to 0
var ntlImage = ee.Image(filtered.first()).unmask(0);

var palette =['#253494','#2c7fb8','#41b6c4','#a1dab4','#ffffcc' ];
var ntlVis = {min:0, max: 63,  palette: palette}

Map.centerObject(geometry, 6);
Map.addLayer(ntlImage.clip(geometry), ntlVis, 'Night Time Lights ' + year);

// Extract the native resolution of the image
var resolution = ntlImage.projection().nominalScale();

// NTL images have DN values from 0-63
// We can create a histogram to show pixel counts
// for each DN value
// var chart = ui.Chart.image.histogram({
//   image: ntlImage,
//   region: geometry,
//   scale: resolution,
//   maxBuckets: 63,
//   minBucketWidth: 1})

// Fails
//print(chart);

// Let's extract the data using reduceRegion
// and ee.Recuer.histogram() reducer
var stats = ntlImage.reduceRegion({
  reducer: ee.Reducer.fixedHistogram({
    min: 0,
    max: 64,
    steps: 64}),
  geometry: geometry,
  scale: resolution,
  maxPixels: 1e10,
  tileScale: 16
})

// Extract the histogram values from the results
var bandName = 'b1';
var values = ee.Array(stats.get(bandName)).toList();

// Create a FeatureCollection
var histogramFc = ee.FeatureCollection(values.map(function(item){
  var itemList = ee.List(item);
  var bucket = itemList.get(0); 
  var value = itemList.get(1);
  var nullGeom = geometry.centroid();
  return ee.Feature(nullGeom, {
    bucket: bucket,
    value: value
  })
}));
// For large computations, we can export the results
Export.table.toAsset({
  collection: histogramFc,
  description: 'Histogram_FeatureCollection',
  assetId: 'users/ujavalgandhi/ee_dataviz/histogram_fc'})

// Import the asset once export finishes
var histogramFcExported = ee.FeatureCollection('users/ujavalgandhi/ee_dataviz/histogram_fc');
print(histogramFcExported)

var chart = ui.Chart.feature.byFeature({
  features: histogramFc,
  xProperty: 'bucket',
  yProperties: ['value']
}).setChartType('ColumnChart')
.setOptions({
    title: 'Night Time Lights Distribution for ' + country + ' ' + year,
    vAxis: {
      title: 'Number of Grids', 
      gridlines: {color: 'transparent'},
      //viewWindow: {min:0, max: 200000}
    },
    hAxis: {
      title: 'Level of Observed Nighttime Lights',
      ticks: [0, 6, 13, 21, 29, 37, 45, 53, 61],
      gridlines: {color: 'transparent'}
    },
    //bar: { gap: 1 },
    legend: { position: 'none' },
    colors: ['#525252']
  })
print(chart)
// // Add options to add labels and ticks
// var chart = ui.Chart.image.histogram({
//   image: ntlImage,
//   region: geometry,
//   scale: resolution,
//   maxBuckets: 63,
//   minBucketWidth: 1
// }).setOptions({
//     title: 'Night Time Lights Distribution for ' + country + ' ' + year,
//     vAxis: {
//       title: 'Number of Grids', 
//       gridlines: {color: 'transparent'},
//       viewWindow: {min:0, max: 200000}
//     },
//     hAxis: {
//       title: 'Level of Observed Nighttime Lights',
//       ticks: [0, 6, 13, 21, 29, 37, 45, 53, 61],
//       gridlines: {color: 'transparent'}
//     },
//     bar: { gap: 1 },
//     legend: { position: 'none' },
//     colors: ['#525252']
//   })
  
// print(chart);  
