/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = /* color: #d63000 */ee.Geometry.Point([81.73099978484261, 27.371459793533507]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var modis = ee.ImageCollection("MODIS/006/MOD13Q1");

var filtered = modis
  .filter(ee.Filter.date('2019-01-01', '2023-01-01'));

// Function for Cloud Masking
var bitwiseExtract = function(input, fromBit, toBit) {
  var maskSize = ee.Number(1).add(toBit).subtract(fromBit)
  var mask = ee.Number(1).leftShift(maskSize).subtract(1)
  return input.rightShift(fromBit).bitwiseAnd(mask)
}

var maskSnowAndClouds = function(image) {
  var summaryQa = image.select('SummaryQA')
  // Select pixels which are less than or equals to 1 (0 or 1)
  var qaMask = bitwiseExtract(summaryQa, 0, 1).lte(1)
  var maskedImage = image.updateMask(qaMask)
  return maskedImage.copyProperties(image, ['system:index', 'system:time_start'])
}

// Function for Scaling Pixel Values
// MODIS NDVI values come as NDVI x 10000 that need to be scaled by 0.0001
var ndviScaled = function(image) {
  var scaled = image.divide(10000)
  return scaled.copyProperties(image, ['system:index', 'system:time_start'])
};

var processedCol = filtered
  .map(maskSnowAndClouds)
  .map(ndviScaled)

var chart = ui.Chart.image.doySeriesByYear({
  imageCollection: processedCol,
  bandName: 'NDVI',
  region: geometry,
  scale: 500
}).setOptions({
      interpolateNulls: true,
      lineWidth: 1,
      pointSize: 3,
      title: 'NDVI DOY Time-Series',
      vAxis: {title: 'NDVI'},
      hAxis: {title: 'Day-of-Year', gridlines: {count: 12}}
    })
print(chart)

